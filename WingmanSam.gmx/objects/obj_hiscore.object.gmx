<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hiscore</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
  This object controls the high score display
  It uses score to determine if the score was large
  enough to be entered or just to display the scores.
*/
alpha = 0;
fadein = 0;
edit = 0;
finish = false;
msg = -1;
/*
    Some devices (those without a keyboard) cannot use the text input system 
    so must use an ascyncronus event to invoke their virtual keyboard. 
    This setion decides which to use, input into the table or use a pop-up window.
*/
switch (os_type){
   case os_android:
   case os_ios:
   case os_winphone:
   case os_unknown:
     device = 1;   // use async dialogue
     break;
   default:
     device = 0; // use our own text input
}

with (instance_create(x+236,y+288,obj_highscore_button)){
  visible = true;
}
update_index = -1;
// Is the score good enough to add?
if(score &gt; 0){
  update_index = scr_add_hiscore();
  if(update_index &gt; -1){
    edit = 1;
    if(device == 0){
      // Used for devices with a keyboard
      with (instance_create(x+62,y+80+(update_index*20),obj_input_text)){
        update_index = other.update_index;
      }
      with (obj_highscore_button){
        txt = "OK"; // button text when editing
      }
    }else{
      // used for keyboard-less devices like Android 
      msg = get_string_async("Congratulations You made the top ten","Enter Name");
    }
  }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// handle fade effects
if(alpha &lt; 1 &amp;&amp; instance_exists(obj_highscore_button)){
  // Fade in effect
  alpha += 0.02;
  if(alpha == 1){
    with (obj_highscore_button) {visible = true;}
    if(update_index == -1){
      edit = 0;
    }
  }
  exit;
}
if(instance_exists(obj_input_text)) {exit;}
if(!instance_exists(obj_highscore_button)){
  // Fade out effect
  if(alpha &gt; 0){
    alpha -= 0.05;
  }else{
    finish = true;
  }
}
if(finish){
  room_goto(menu_room); // Change to suit your menu room name
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>io_clear();
if(instance_exists(obj_input_text)) {exit;}
if(instance_exists(obj_highscore_button)) {
  if(obj_highscore_button.txt == "Continue"){
    if(obj_highscore_button.visible){
      room_goto(menu_room);
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i_d = ds_map_find_value(async_load, "id");
if(i_d == msg){
  if(ds_map_find_value(async_load, "status")){
    if(ds_map_find_value(async_load, "result") != ""){
      name = ds_map_find_value(async_load, "result");
      name = string_copy(name,1,20); // truncate to 20 chars
      if(name == "Enter Name"){ name = "No Name";}
      // Call security to frisk the input for ilegal characters
      name = string_replace_all(name," ",string(game_id));
      name = string_lettersdigits(name);
      name = string_replace_all(name,string(game_id)," ");
      ds_list_replace(global.CH_hiscore_name,update_index,name);
      scr_hiscore_save();           // Save updated scores
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xx,yy,i;
xx = x;
yy = y;

draw_set_alpha(alpha);
draw_sprite_ext(sprite_index,0,x,y,1,1,0,c_white,alpha);
draw_set_halign(fa_center);
draw_set_color(c_black);
draw_set_font(fnt_Arial11);
draw_text(x+236,yy+38,"Top Ten Players");
draw_set_halign(fa_left);

xx += 62; // left margin
yy += 60; // top margin

// Display our heading row
draw_text(xx+60,yy,global.CH_header_name);
//draw_text(xx+180,yy,global.CH_header_extra);
draw_text(xx+270,yy,global.CH_header_score);
draw_line(xx-10,yy+18,xx+360,yy+18);
yy += 20;

for(i=0; i&lt;10; i+=1){
  draw_set_color(c_black);
  if(i == update_index){draw_set_color(c_red);}
  draw_text(xx,yy,ds_list_find_value(global.CH_hiscore_name,i));
  draw_set_halign(fa_right);
 // extra = ds_list_find_value(global.CH_hiscore_extra,i);
 // if(is_real(global.CH_extra_score)){
 //   extra = string_format(extra,10,global.CH_extra_decimals);
 // }
 // draw_text(xx+240,yy,extra);
  draw_text(xx+340,yy,scr_add_commas(ds_list_find_value(global.CH_hiscore_value,i)));
  draw_set_halign(fa_left);
  yy+=20;
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screen_save("screen01.png");

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
